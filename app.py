import os
from dotenv import load_dotenv
import streamlit as st

from groq_handling import predict_class_llama

load_dotenv()

LOGO_PATH = os.getenv('LOGO_PATH')
ICON_PATH = os.getenv('ICON_PATH')
ECOMIND_LOGO_PATH = os.getenv('ECOMIND_LOGO_PATH')

st.set_page_config(
    page_title="Classification des D√©chets - EcoMind AI",
    page_icon=":recycle:",
    layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
        'Get Help': 'https://github.com/dan-lara/Garbage-Classifier',
        'Report a bug': "https://github.com/dan-lara/Garbage-Classifier/issues",
        'About': "# C'est le *meilleur AI trieur* de d√©chets que vous verrez aujourd'hui.!"
    }
)
from models_handling import *

custom_classes = ["üîã Batterie", "üì¶ Carton", "üîó Metal", "üçì Organique", "üì∞ Papier", "üßÉ Plastique", "ü´ô Verre", "üëñ Vetements"]
columns_history = ["Nom Image", "EcoMind AI", "ResNet 50", "Yolos Tiny", "Llama 90B", "Date/Heure"]
if "history" not in st.session_state:
    st.session_state["history"] = pd.DataFrame(columns=["Nom Image", "EcoMind AI", "ResNet 50", "Yolos Tiny", "Llama 90B", "Date/Heure"])

# Application principale
def page_analyse():
    st.logo(
        image = LOGO_PATH,
        icon_image = ICON_PATH,
        size = "large"
    ) 
    st.title("‚ôªÔ∏è Classification des D√©chets ")
    st.sidebar.title("Choisir Mod√®les : ")
    checks = []
    for model in ["resnet 50", "EcoMind AI", "yolos tiny", "llama-3 11b", "llama-3 90b"]:
        checks.append(st.sidebar.checkbox(model, key=model, value=True))
        # st.session_state.update({model: checks[-1]})
    # st.markdown("### Soumettez une image pour la classifier selon diff√©rents mod√®les d'IA")

    uploaded_file = st.file_uploader("Choisissez une image", type=["jpg", "png", "jpeg"])

    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")        
        image2 = tensor_to_pil(custom_transform(image))
        predicted_classes = []
        col1, col2, col3 = st.columns([0.5, 1, 0.6])
        # Afficher l'image soumise
        with col1:
            st.header("Image soumise")
            st.write("Dimensions de l'image :", image.size) 
            st.image(rounded_image(image), caption="Image soumise", use_container_width=True) 
            st.write("Dimensions de l'image :", image2.size)           
            st.image(rounded_image(image2), caption="Image soumise", use_container_width=True) 
                      
        
        if st.session_state["resnet 50"]:
            with col2:
                with st.container(border=True):
                    start_time = time.time()
                    predicted_class, probabilities = predict_resnet(image2, "microsoft/resnet-50")
                    inference_time = time.time() - start_time
                    reponse("ResNet 50", predicted_class, max(probabilities),
                            "https://huggingface.co/microsoft/resnet-50", inference_time)
                    # st.caption(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
                    # sorted_probs = sorted(zip(resnet_model.config.id2label.values(), probabilities), key=lambda x: x[1], reverse=True)
                    # plot_prob_graphs(sorted_probs, color="Blues")
                    predicted_classes.append({"predict_class": predicted_class, "prob":max(probabilities)})

        if st.session_state["EcoMind AI"]:
            with col2:
                with st.container(border=True):
                    start_time = time.time()
                    predicted_class, probabilities = predict_custom(image2)
                    inference_time = time.time() - start_time
                    reponse("EcoMind AI", predicted_class, max(probabilities),
                            "https://huggingface.co/dan-lara/Garbage-Classifier-Resnet-50-Finetuning", inference_time)
                    # st.caption(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
                    sorted_probs = sorted(zip(custom_classes, probabilities*100), key=lambda x: x[1], reverse=True)
                    # st.caption(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
                    # with st.expander("Probabilit√©s par classe", expanded=True):
                    #     for label, prob in sorted_probs:
                    #         st.markdown(f"### {label} : {(prob*100):.2f} %")
                    plot_prob_graphs(sorted_probs, color=[[0, "#A8E6A1"], [1, "#1B5E20"]])
                    predicted_classes.append({"predict_class": predicted_class, "prob":max(probabilities)})
        
        if st.session_state["yolos tiny"]:
            with col3:
                with st.container(border=True):
                    start_time = time.time()
                    predicted_class, probabilities = predict_yolo(image, "hustvl/yolos-tiny")
                    inference_time = time.time() - start_time
                    reponse("Yolos Tiny", predicted_class, probabilities,
                            "https://huggingface.co/hustvl/yolos-tiny", inference_time)
                    # st.caption(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
                    # sorted_probs = sorted(zip(yolo_model.config.id2label.values(), probabilities), key=lambda x: x[1], reverse=True)
                    # plot_prob_graphs(sorted_probs, color="Reds")
                    predicted_classes.append({"predict_class": predicted_class, "prob":(probabilities)})

        if st.session_state["llama-3 11b"]:
            with col3:
                with st.container(border=True):
                    start_time = time.time()
                    predicted_class = predict_class_llama(image, "llama-3.2-11b-vision-preview")
                    inference_time = time.time() - start_time
                    # st.header("Llama 3.2 11b")
                    st.markdown("## [Llama 3.2 11B](https://huggingface.co/meta-llama/Llama-3.2-11B-Vision)", unsafe_allow_html=False)
                    st.metric("Classe pr√©dite", predicted_class, delta=None, delta_color="normal", border=False)
                    # st.markdown(f"###### Temps d'inf√©rence : {inference_time:.2f} secondes", unsafe_allow_html=False)
                    st.write(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
                    # st.caption(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
        
        if st.session_state["llama-3 90b"]:
            with col3:
                with st.container(border=True):
                    start_time = time.time()
                    predicted_class = predict_class_llama(image, "llama-3.2-90b-vision-preview")
                    inference_time = time.time() - start_time
                    # st.header("Llama 3.2 90B")
                    st.markdown("## [Llama 3.2 90B](https://huggingface.co/meta-llama/Llama-3.2-90B-Vision)", unsafe_allow_html=False)
                    st.metric("Classe pr√©dite", predicted_class, delta=None, delta_color="normal", border=False)
                    # st.markdown(f"###### Temps d'inf√©rence : {inference_time:.2f} secondes", unsafe_allow_html=False)
                    st.write(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
                    # st.caption(f"Temps d'inf√©rence : {inference_time:.2f} secondes")
                    predicted_classes.append({"predict_class": predicted_class})

        add_prediction_to_history(uploaded_file.name, predicted_classes)

def add_prediction_to_history(image_name, predicted_classes):
    """
    Ajoute une nouvelle pr√©diction √† l'historique.
    """
    if "history" not in st.session_state:
        st.session_state["history"] = pd.DataFrame(columns=columns_history)

    new_entry = {
        "Nom Image": image_name,
        "EcoMind AI": predicted_classes[1],
        "ResNet 50": predicted_classes[0],
        "Yolos Tiny": predicted_classes[2],
        "Llama 90B": predicted_classes[3],
        "Date/Heure": pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"),
    }

    st.session_state["history"] = pd.concat([st.session_state["history"], pd.DataFrame([new_entry])], ignore_index=True)

def page_historique():
    """
    Historique des Pr√©dictions
    """
    # st.image(
    #     image="/home/portable016/magnet/SU/AI/app/ecomind_logo.png",
    #     width=800, 
    # )
    st.title("Historique des Pr√©dictions")
    st.write("Retrouvez la liste des images soumises et leur classe pr√©dite.")

    # Historique des pr√©dictions
    hist_df = st.session_state["history"]
    if not hist_df.empty:
        st.dataframe(hist_df, use_container_width=True)

        # Bouton de t√©l√©chargement CSV
        csv_data = hist_df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="T√©l√©charger l'historique en CSV",
            data=csv_data,
            file_name="historique_predictions.csv",
            mime="text/csv"
        )

        # Bouton de r√©initialisation
        if st.button("R√©initialiser l'historique"):
            st.session_state["history"] = pd.DataFrame(columns=columns_history)
            st.success("Historique r√©initialis√© !")
    else:
        st.info("Aucune pr√©diction n'a √©t√© enregistr√©e pour le moment.")

def page_a_propos():
    st.logo(
        image = LOGO_PATH,
        icon_image = ICON_PATH,
        size = "large"
    ) 
    st.title("√Ä Propos")
    
    st.markdown("""
    # Comparaison entre Mod√®les de Classification des D√©chets

    Bienvenue sur notre plateforme web, qui vous permet d'explorer et de comparer diff√©rents mod√®les d'intelligence artificielle pour la classification des d√©chets. Cette application interactive vise √† pr√©senter les performances et les caract√©ristiques des mod√®les les plus avanc√©s dans ce domaine, en se basant sur le ¬´ Garbage Classification Dataset ¬ª.

    ## Mod√®les Compar√©s
    """)
    with st.container():
        col1, col2 = st.columns([1, 1])
        col1.markdown("""
        ### ResNet-50
        - **Architecture** : Mod√®le convolutionnel pr√©-entra√Æn√© sur ImageNet.
        - **Taux de Pr√©cision** : 92 % sur le jeu de test.
        - **Points Forts** : Performances √©lev√©es, polyvalence.
        - **Limitations** : Sensible √† la qualit√© des images.
        - **Probl√®me** : G√©n√©raliste avec 1000 classes d'images
        - **Lien vers le mod√®le** : [ResNet-50](https://huggingface.co/microsoft/resnet-50)

        ### ResNet-50 Fine-Tun√©
        - **Architecture** : Mod√®le convolutionnel avec des connexions r√©siduelles, pr√©-entrai√Æn√© sur ImageNet.
        - **Taux de Pr√©cision** : 94 % sur le jeu de test.
        - **Points Forts** : Performances √©quilibr√©es, facile √† d√©ployer.
        - **Limitations** : Moins adapt√© √† des classes hors dataset.
        - **Lien vers le mod√®le** : [Garbage Classifier ResNet-50 Fine-Tuning](https://huggingface.co/dan-lara/Garbage-Classifier-Resnet-50-Finetuning)
        """)
        col2.markdown("""
        ### YOLO (You Only Look Once) Tiny
        - **Architecture** : Mod√®le √† d√©tection rapide et pr√©cise.
        - **Taux de Pr√©cision** : Variable selon la version et les ajustements.
        - **Points Forts** : Id√©al pour la d√©tection en temps r√©el.
        - **Limitations** : Sensible √† la qualit√© des images.
        - **Lien vers le mod√®le** : [YOLOs Tiny](https://huggingface.co/hustvl/yolos-tiny)

        ### Mod√®le Multimodal (LLM)
        - **Architecture** : Bas√© sur des mod√®les de langage √©tendus √† la vision.
        - **Mod√®le** : Llama 3.2 11B et Llama 3.2 90B.
        - **Points Forts** : Compr√©hension contextuelle avanc√©e.
        - **Limitations** : Consommation √©lev√©e de ressources.
        - **Lien vers le mod√®le** : [Llama 3.2 11B](https://huggingface.co/meta-llama/Llama-3.2-11B-Vision) et [Llama 3.2 90B](https://huggingface.co/meta-llama/Llama-3.2-90B-Vision)
        """)
    st.markdown("""
    ## Fonctionnement du Site

    1. **T√©l√©chargez le Dataset**
    - Acc√©dez au dataset via [Normalized Garbage Dataset for ResNet](https://www.kaggle.com/datasets/danielferreiralara/normalized-garbage-dataset-for-resnet).

    2. **Chargez une Image**
    - Importez une photo de d√©chet via l'interface.

    3. **Obtenez les R√©sultats**
    - Visualisez les pr√©dictions avec des scores de confiance et comparez les r√©sultats entre mod√®les.

    4. **Explorez les Statistiques**
    - Consultez les graphiques et les rapports sur les performances des mod√®les par classe.

    ## Applications Potentielles

    - **Environnement** : Automatisation du tri des d√©chets.
    - **Recherche** : D√©veloppement de nouveaux mod√®les plus pr√©cis.
    - **√âducation** : Sensibilisation au recyclage via des outils interactifs.

    ## D√©couvrez Maintenant

    Visitez notre site et testez nos outils pour contribuer activement √† une meilleure gestion des d√©chets et √† la protection de notre environnement.         
    """
    )
    # st.markdown("Cette application a √©t√© d√©velopp√©e par [Dan Lara](https://github.com/dan-lara/)")

def main():
    # st.image(os.getenv('LOGO_PATH'), width=1000)
    pg = st.navigation([
        st.Page(page_analyse,       icon=":material/search:",   title="Analyse"),
        st.Page(page_historique,    icon=":material/history:",   title="Historique"),
        st.Page(page_a_propos,       icon=":material/info:",     title="√Ä Propos")
    ])
    pg.run()

if __name__ == "__main__":
    main()

